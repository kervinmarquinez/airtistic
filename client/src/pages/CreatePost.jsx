import { useState } from "react";
import { useNavigate } from 'react-router-dom';
import { useSelector } from "react-redux";
import Swal from 'sweetalert2';

import { getRandomPrompt } from '../helpers';
import { FormField } from '../components';


export const CreatePost = () => {

    const navigate = useNavigate();
    const [form, setForm] = useState({
      name: '',
      prompt: '',
      photo: '',
    })

    const [generatingImg, setGeneratingImg] = useState(false)
    const [loading, setLoading] = useState(false)

    const { status } = useSelector(state => state.language)

    const generateImage = async() => {
      if(form.prompt) {

        try {
          setGeneratingImg(true);
          const response = await fetch('http://localhost:8080/api/v1/dalle', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({prompt: form.prompt}),
          })

          const data = await response.json()
          console.log(data);
          setForm({...form, photo: `data:image/jpeg;base64,${data.photo}`})
          
        } catch (error) {
          alert(error);
        } finally {
          setGeneratingImg(false)
        }

      } else {
        Swal.fire(status ? 'Introduce una prompt' : 'Please enter a prompt ', status ? 'Esto es un error inesperado' : 'This is an unexpected error', 'error')
      }

    }

    const handleSubmit = async(e) => {
      e.preventDefault();

      if(form.prompt && form.photo) {
        setLoading(true)

        try {

          const response = await fetch('http://localhost:8080/api/v1/post', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(form)
          })

          await response.json();
          navigate('/')

        } catch (error) {
          alert(error)
          setLoading(false)
        }
      } else {
        Swal.fire(status ? 'Introduce una prompt' : 'Please enter a prompt ', status ? 'Esto es un error inesperado' : 'This is an unexpected error', 'error')
      }

    }

    const handleChange = (e) => {
      setForm({...form, [e.target.name]: e.target.value})
      

    }

    const handleSurpriseMe = () => {
      const randomPrompt = getRandomPrompt(form.prompt)
      setForm({...form, prompt: randomPrompt})
    }


    return (
      <section className="max-w-7xl mx-auto">

        <div>

          <h1 className='font-extrabold text-white text-[32px]'>{status ? "Crea im치genes" : "Create"}</h1>
          <p className='mt-2 text-[#666e75] text-[14px] max-w[500px]'>{status ? "Crea una colecci칩n de im치genes imaginativas y visualmente impresionantes generadas por DALL-E y comp치rtela con la comunidad." : "Create a collection of imaginative and visually stunning images generated by DALL-E and share them with the community."}</p>

        </div>

        <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>

          <div className="flex flex-col gap-5">

            <FormField 
              labelName={status ? "Tu nombre" : "Your Name"}
              type="text"
              name="name"
              placeholder="Adriano Alves"
              value={form.name}
              handleChange={handleChange}
            />

            <FormField 
              labelName="Prompt"
              type="text"
              name="prompt"
              placeholder="panda mad scientist mixing sparkling chemicals, digital art"
              value={form.prompt}
              handleChange={handleChange}
              isSurpriseMe
              handleSurpriseMe={handleSurpriseMe}
            />

            {form.photo && (

              <div className="relative border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border- blue-500 w-64 p-3 h-64 flex justify-center items-center">

                <img
                  src={form.photo}
                  alt={form.prompt}
                  className="w-full h-full object-contain"
                />

              </div>)
            }

          </div>

          <div className="mt-5 flex gap-5">
            <button
              type="button"
              onClick={generateImage}
              className="text-white bg-[#1f6ac7] transition hover:bg-[#10367e] hover:duration-150 font-medium text-sm w-full sm:w-auto px-5 py-2.5 text-center"
            >
              {generatingImg ? (status ? 'Generando...' : 'Generating...') : (status ? 'Generar' : 'Generate')}

            </button>

          </div>

          <div className="mt-10">

            <p className="mt-2 text-[#666e75] text-[14px]">

              {status ? 'Una vez que hayas creado la imagen que deseas, puedes compartirla con otros miembros de la comunidad' : 'Once you have created the image you want, you can share it with others in the community'}

            </p>

          </div>

          <button
            type="submit"
            className="mt-3 text-white bg-[#6469ff] font-medium text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {loading ? (status ? 'Compartiendo...'  :'Sharing...') : (status ? 'Comparte con la comunidad' : 'Share with the community')}

          </button>

        </form>


      </section>
    )
}
